import re

def remove_caractere(texto1):
    tirar = '[,:;.!?]+'
    repl = ''
    result = re.sub(tirar, repl, texto1)

    return result    

def le_assinatura():
    '''A funcao le os valores dos tracos linguisticos do modelo e devolve uma assinatura a ser comparada com os textos fornecidos'''
    print("Bem-vindo ao detector automático de COH-PIAH.")
    print("Informe a assinatura típica de um aluno infectado:")

    wal = float(input("Entre o tamanho médio de palavra:"))
    ttr = float(input("Entre a relação Type-Token:"))
    hlr = float(input("Entre a Razão Hapax Legomana:"))
    sal = float(input("Entre o tamanho médio de sentença:"))
    sac = float(input("Entre a complexidade média da sentença:"))
    pal = float(input("Entre o tamanho medio de frase:"))

    return [wal, ttr, hlr, sal, sac, pal]

def le_textos():
    '''A funcao le todos os textos a serem comparados e devolve uma lista contendo cada texto como um elemento'''
    i = 1
    textos = []
    texto = input("Digite o texto " + str(i) +" (aperte enter para sair):")
    while texto:
        textos.append(texto)
        i += 1
        texto = input("Digite o texto " + str(i) +" (aperte enter para sair):")

    return textos

def separa_sentencas(texto):
    '''A funcao recebe um texto e devolve uma lista das sentencas dentro do texto'''
    sentencas = re.split(r'[.!?]+', texto)
    if sentencas[-1] == '':
        del sentencas[-1]
    return sentencas

def separa_frases(sentenca):
    '''A funcao recebe uma sentenca e devolve uma lista das frases dentro da sentenca'''
    return re.split(r'[,:;]+', sentenca)

def separa_palavras(frase):
    '''A funcao recebe uma frase e devolve uma lista das palavras dentro da frase'''
    return frase.split()

def n_palavras_unicas(lista_palavras):
    '''Essa funcao recebe uma lista de palavras e devolve o numero de palavras que aparecem uma unica vez'''
    freq = dict()
    unicas = 0
    for palavra in lista_palavras:
        p = palavra.lower()
        if p in freq:
            if freq[p] == 1:
                unicas -= 1
            freq[p] += 1
        else:
            freq[p] = 1
            unicas += 1

    return unicas

def n_palavras_diferentes(lista_palavras):
    '''Essa funcao recebe uma lista de palavras e devolve o numero de palavras diferentes utilizadas'''
    freq = dict()
    for palavra in lista_palavras:
        p = palavra.lower()
        if p in freq:
            freq[p] += 1
        else:
            freq[p] = 1

    return len(freq)

def compara_assinatura(as_a, as_b):
    final = 0
    for i in range(5):
        final += abs(as_a[i] - as_b[i])
    return (final/len(as_a))


def calcula_wal(texto):
    texto_substituido = remove_caractere(texto)
    final = 0
    lista_palavras = separa_palavras(texto_substituido)
    for i in lista_palavras:
        final += len(i)
    return (final/len(lista_palavras))

def calcula_ttr(texto):
    novo_texto = remove_caractere(texto)
    lista_palavras = separa_palavras(novo_texto)
    return (n_palavras_diferentes(lista_palavras) / len(lista_palavras))

def calcula_hlr(texto):
    novo_texto = remove_caractere(texto)
    lista_palavras = separa_palavras(novo_texto)
    return (n_palavras_unicas(lista_palavras) / len(lista_palavras))

def calcula_sal(texto):
    total = 0 
    lista_sentencas = separa_sentencas(texto)
    for sentenca in lista_sentencas:
        total += len(sentenca)
    return(total/len(lista_sentencas))
    
def calcula_sac(texto):
    lista_sentencas = separa_sentencas(texto)
    total = 0
    for sentenca in lista_sentencas:
        total += len(separa_frases(sentenca))
    return (total / len(lista_sentencas))

def calcula_pal(texto):
    total = 0
    lista_frase = []
    lista_sentenca = separa_sentencas(texto)
    for sentenca in lista_sentenca:
        lista_frase += separa_frases(sentenca)
    for frase in lista_frase:
        total += len(frase)
    return (total/len(lista_frase))
    

def calcula_assinatura(texto):
    wal = calcula_wal(texto)
    ttr = calcula_ttr(texto)
    hlr = calcula_hlr(texto)
    sal = calcula_sal(texto)
    sac = calcula_sac(texto)
    pal = calcula_pal(texto)
    return [wal, ttr, hlr, sal, sac, pal]
    
    
def avalia_textos(textos, ass_cp):
    ass1 = calcula_assinatura(textos[0])
    comp_atual = compara_assinatura(ass1,ass_cp)
    mais_infectado = 0
    
    for i in range(1,len(textos)):
        assinatura = calcula_assinatura(textos[i])
        resultado = compara_assinatura(assinatura, ass_cp)
        if resultado < comp_atual:
            comp_atual = resultado
            mais_infectado = i 
    
    return 1+mais_infectado

assinatura = le_assinatura()
lista_textos = le_textos()
infectado = avalia_textos(lista_textos, assinatura)
print(f'O autor do texto {infectado} está infectado com COH-PIAH')
